Mutation

What will the following code print, and why? Don't run the code until you have tried to answer.

array1 = %w(Moe Larry Curly Shemp Harpo Chico Groucho Zeppo)
array2 = []
array1.each { |value| array2 << value }
array1.each { |value| value.upcase! if value.start_with?('C', 'S') }
puts array2

***************

array1.each { |value| array2 << value }
#=> array2: ['Moe', 'Larry', 'Curly', 'Shemp', 'Harpo', 'Chico', 'Groucho', 'Zeppo']
array1.each { |value| value.upcase! if value.start_with?('C', 'S') }
#=> array1: ['Moe', 'Larry', 'CURLY', 'SHEMP', 'Harpo', 'CHICO', 'Groucho', 'Zeppo']
puts array2

Moe
Larry
Curly
Shemp
Harpo
Chico
Groucho
Zeppo

Adding the values of array1 to array2 does not change array1. array2, as an array, is immutable and is not affected by the changes in array1.

WRONG. "The answer lies in the fact that the first each loop simply copies a bunch of references from array1 to array2. When that first loop completes, both arrays not only contain the same values, they contain the same String objects. If you modify one of those Strings, that modification will show up in both Arrays."